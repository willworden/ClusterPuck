<!DOCTYPE html>
<meta charset="utf-8">
<style>

.node {
  cursor: pointer;
}

.node:hover {
  stroke: #000;
  stroke-width: 1.5px;
}

.node--leaf {
  fill: white;
}

.label {
  font: 20px "Helvetica Neue", Helvetica, Arial, sans-serif;
  text-anchor: middle;
  text-shadow: 0 1px 0 #fff, 1px 0 0 #fff, -1px 0 0 #fff, 0 -1px 0 #fff;

}

.label--leaf {
  font: 10px "Helvetica Neue", Helvetica, Arial, sans-serif;
  text-anchor: middle;
  text-shadow: 0 1px 0 #fff, 1px 0 0 #fff, -1px 0 0 #fff, 0 -1px 0 #fff; 
}

.label,
.label--leaf,
.node--root,
.node--leaf {
  pointer-events: none;
}

</style>
<script src="http://d3js.org/d3.v3.min.js"></script>
<<<<<<< HEAD
<script src="https://code.jquery.com/jquery-2.1.1.min.js"></script>

<body>
  <div class="filter-container">
    Filter by: <input class="filter-text" type="text"></input>
    <input class="filter-button" type="button" value="Submit" />
  </div>
  <div class="chart-container"></div>
</body>

=======
<script src="//ajax.googleapis.com/ajax/libs/jquery/2.1.1/jquery.min.js"></script>
>>>>>>> 0e982747528c1bc3f41488804307ea23807de006
<script>

var margin = 20,
    diameter = 960,
    format = d3.format(",d");

var color = d3.scale.linear()
    .domain([-1, 5])
    .range(["hsl(152,80%,80%)", "hsl(228,30%,40%)"])
    .interpolate(d3.interpolateHcl);

var pack = d3.layout.pack()
    .padding(2)
    .size([diameter - margin, diameter - margin])
    .value(function(d) { return d.size; })

var url = "flare3.js"; //"http://localhost:3000/data/demo.json";

function renderChart(root) {
  d3.select("svg").remove();

  var svg = d3.select(".chart-container").append("svg")
      .attr("width", diameter)
      .attr("height", diameter)
    .append("g")
      .attr("transform", "translate(" + diameter / 2 + "," + diameter / 2 + ")");

  var focus = root,
      nodes = pack.nodes(root),
      view;

  var circle = svg.selectAll("circle")
      .data(nodes)
    .enter().append("circle")
      .attr("class", function(d) { return d.parent ? d.children ? "node" : "node node--leaf" : "node node--root"; })
      .style("fill", function(d) { return d.children ? color(d.depth) : null; })
      .on("click", function(d) { if (focus !== d) zoom(d), d3.event.stopPropagation(); });

  var text = svg.selectAll("text")
      .data(nodes)
    .enter().append("text")
      .attr("class", function(d) {
        return d.children ? "label" : "label--leaf";
      })
      .attr("dy", "0.3em")
      // .style("fill-opacity", function(d) { return d.parent === root ? 1 : 0; })
      // .style("display", function(d) { return d.parent === root ? null : "none"; })
      .text(function(d) { return d.name + "<br>" + format(d.size); })
      .call(wrap);

  var node = svg.selectAll("circle,text");

  d3.select(".chart-container")
      .style("background", color(-1))
      .on("click", function() { zoom(root); });

  zoomTo([root.x, root.y, root.r * 2 + margin]);

  function zoom(d) {
    var focus0 = focus; focus = d;

    var transition = d3.transition()
        .duration(d3.event.altKey ? 7500 : 750)
        .tween("zoom", function(d) {
          var i = d3.interpolateZoom(view, [focus.x, focus.y, focus.r * 2 + margin]);
          return function(t) { zoomTo(i(t)); };
        });

    transition.selectAll("text")
      .filter(function(d) { return d.parent === focus || this.style.display === "inline"; })
        .style("fill-opacity", function(d) { return d.parent === focus ? 1 : 0; })
        .each("start", function(d) { if (d.parent === focus) this.style.display = "inline"; })
        .each("end", function(d) { if (d.parent !== focus) this.style.display = "none"; });
  }

  function zoomTo(v) {
    var k = diameter / v[2]; view = v;
    node.attr("transform", function(d) { return "translate(" + (d.x - v[0]) * k + "," + (d.y - v[1]) * k + ")"; });
    circle.attr("r", function(d) { return d.r * k; });
  }
<<<<<<< HEAD
};

function prepAndRenderChart(filters){
  $.getJSON( url, function( data ) {
    console.log(filters);
    if (filters && filters.length > 0 ){
     renderChart(prepData(data, filters));
     return;
    }

    renderChart(data);
  });
}

function prepData(data, filters){
  var matchedClusters = [];

  if(data.children) {
     data.children.forEach(function(cluster) {
       var isMatch = false;

       if(cluster.children) {
          for(var i = 0; i < cluster.children.length; i++)
          {
            var variable = cluster.children[i];
             isMatch = isMatchFilter(variable, filters);
             if(isMatch)
               break;            
          }
       }

       if(isMatch)
       {
         console.log(cluster.name + " is a match");
         matchedClusters.push(cluster);
       }
     });
  }

   data.children = matchedClusters;
   console.log("Data is now ");
   console.log(data);
   return data;
}

function isMatchFilter(variable, filters) {
  for(var i = 0; i < filters.length; i++)
  {
    var f = filters[i];
    if(variable.name.toLowerCase() == f.toLowerCase())
      return true;
  }
  return false;
}
=======

  // ################ custom functions ####################
  function wrap(text) {
    text.each(function() {
      var text = d3.select(this),
          textSize = textWidth(text.text().split(/<br>/)[0]),
          words = text.text().split(/<br>/).reverse(),
          word,
          line = [],
          lineNumber = 0,
          lineHeight = 0.5, // ems
          y = text.attr("y"),
          dy = parseFloat(text.attr("dy")),
          tspan = text.text(null).append("tspan").attr("x", 0).attr("y", y).attr("dy", dy + "em");     
      while (word = words.pop()) {
        line.push(word);
        tspan.text(line.join(" "));
        if (tspan.node().getComputedTextLength() > textSize) {
          line.pop();
          tspan.text(line.join(" "));
          line = [word];
          tspan = text.append("tspan").attr("x", 0).attr("y", y).attr("dy", ++lineNumber * lineHeight + dy + "em").text(word);
        }
      }
    });
  };

  function textWidth(text) {
     var dummyHtmlElem = '<span style="display:none">' + text + '</span>';
     $('body').append(dummyHtmlElem);
     var width = $('body').find('span:last').width();
     $('body').find('span:last').remove();
     return width;
  };
  // ################ custom functions ####################
});
>>>>>>> 0e982747528c1bc3f41488804307ea23807de006

d3.select(self.frameElement).style("height", diameter + "px");

$(".filter-button").on("click", function() {
  var filterText = $(".filter-text").val();
  var values = filterText.split(",");
  console.log(values);
  if(values.length>0 && values[0] != ""){
    console.log("rendering filters");
    prepAndRenderChart(values);
  }
  else{
    prepAndRenderChart("");
  }
});

prepAndRenderChart();

</script>